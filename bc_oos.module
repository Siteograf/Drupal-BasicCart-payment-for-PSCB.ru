<?php

/**
 * @file
 * Basic cart module file.
 */

/**
 * Implements hook_block_info().
 */
function bc_oos_block_info()
{
    $blocks['oos_products_in_order'] = array(
        'info' => t('OOS Products in current order'),
        'cache' => DRUPAL_NO_CACHE,
    );

    $blocks['oos_order_status'] = array(
        'info' => t('OOS Order status'),
        'cache' => DRUPAL_NO_CACHE,
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bc_oos_block_view($delta = '')
{
    $block = array();
    switch ($delta) {
        case 'oos_products_in_order':
            $block['subject'] = t('Товары заказа');
            $block['content'] = bc_oos_products_in_order();
            break;

        case 'oos_order_status':
            $block['subject'] = t('Статус оплаты и кнопка оплатить');
            $block['content'] = bc_ooc_check_order_status();
            break;
    }
    return $block;
}

// Показывает таблицу товаров которые есть в заказе
function bc_oos_products_in_order()
{

    $node = node_load(arg(1));

    drupal_set_title('Заказ № ' . $node->nid);

    $result = db_query("SELECT nid FROM {basic_cart_order_node} WHERE oid = :currentNid", array(':currentNid' => $node->nid));

    $data = array();
    foreach ($result as $node) {
        $nodeObject = node_load($node->nid);

        // эти поля в каждом случае свои
        $img = $nodeObject->field_images['und'][0]['uri'];
        $title = $nodeObject->title;
        $price = intval($nodeObject->price['und'][0]["value"]) . ' руб';

        $data[] = array(
            theme('image_style', array('style_name' => 'cart', 'path' => $img)),
            $title,
            $price,
        );
    }

    // Выводим таблицу 3 колонки
    return theme('table', array('header' => array('', '', ''), 'rows' => $data));
}

/**
 * Form to build the submission to oos.pscb.ru.
 */
function bc_oos_form($form, &$form_state)
{
    // Смотрим на какой странице назодимся
    $node = node_load(arg(1));

    // Проверяем есть ли комментарий так как потом его оправляем в банк
    if (!$node->body) {
        $comment = '';
    } else {
        $comment = $node->body['und']['0']['safe_value'];
    }

    // Строим объект для отправки в банк
    $message = array(
        "amount" => intval($node->field_total_price['und']['0']['safe_value']),
        "details" => variable_get('uc_oos_details'),
        "customerRating" => "5",
        "customerAccount" => drupal_substr($node->title, 0, 128),
        "orderId" => $node->nid,
        "successUrl" => variable_get('bc_url_success', '') . '/node/' . $node->nid,
        "failUrl" => variable_get('bc_url_fail', '') . '/node/' . $node->nid,
        "paymentMethod" => variable_get('bc_oos_method_title'),
        "customerPhone" => strip_tags($node->field_phone['und']['0']['safe_value']),
        "customerEmail" => strip_tags($node->field_email['und']['0']['safe_value']),
        "customerComment" => strip_tags($node->title . ' === ' . $node->field_address['und']['0']['safe_value'] . ' === ' . $comment),
        "data" => array(
            "user" => "",
            "debug" => "1",
        )
    );
    $messageText = json_encode($message);
//    echo $messageText;
//    die;

    $data = array(
        "marketPlace" => variable_get('bc_oos_market_id', '32'),
        "message" => base64_encode($messageText),
        "signature" => hash('sha256', $messageText . variable_get('bc_oos_secret_key', '111111'))
    );

    foreach ($data as $name => $value) {
        $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }

    $form['#action'] = variable_get('bc_oos_payment_page');

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Оплатить онлайн'),
        '#attributes' => array('class' => array( variable_get('uc_oos_button_class') )),
    );
    return $form;
}

/**
 * Implements hook_menu().
 */
function bc_oos_menu()
{
    $items = array();

    $items['admin/config/basic_cart/oos'] = array(
        'title' => 'OOS payment',
        'description' => 'Basic cart checkout settings.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bc_oos_settings_form'),
        'access arguments' => array('administer basic cart'),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 10,
    );
    return $items;
}

/**
 * Adds OOS settings to the payment method settings form.
 *
 * @see uc_oos_uc_payment_method()
 */
function bc_oos_settings_form($op, &$order, $form = NULL, &$form_state = NULL)
{
    $form['bc_oos_market_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Market Place ID'),
        '#description' => t('ID Вашего магазина в системе ООС'),
        '#default_value' => variable_get('bc_oos_market_id', ''),
        '#size' => 16,
    );

    $form['bc_oos_secret_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Ключ API'),
        '#description' => t('Ключ API в личном кабинете системы ООС'),
        '#default_value' => variable_get('bc_oos_secret_key', '111111'),
        '#size' => 64,
    );

    $form['bc_oos_payment_page'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment URL'),
        '#description' => t('Cтраница банка для обработки запроса'),
        '#default_value' => variable_get('bc_oos_payment_page', 'https://oosdemo.pscb.ru/pay/'),
        '#size' => 64,
    );

    $form['bc_oos_merchant_api_url_base'] = array(
        '#type' => 'textfield',
        '#title' => t('URL Merchant API for checking orders'),
        '#description' => t('URL для получения ответа о платеже'),
        '#default_value' => variable_get('bc_oos_merchant_api_url_base', 'https://oosdemo.pscb.ru/merchantApi'),
        '#size' => 64,
    );

    $form['bc_url_success'] = array(
        '#type' => 'textfield',
        '#title' => t('Success URL'),
        '#default_value' => variable_get('bc_url_success', ""),
        '#description' => t('Впишите адрес сайта. Слеш / в конеце не ставить. Будет перенаправлен на страницу заказа. '),
    );

    $form['bc_url_fail'] = array(
        '#type' => 'textfield',
        '#title' => t('Fail URL'),
        '#default_value' => variable_get('bc_url_fail', ""),
        '#description' => t('Впишите адрес сайта. Слеш / в конеце не ставить. Будет перенаправлен на страницу заказа. '),
    );

    $form['uc_oos_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment method title'),
        '#default_value' => variable_get('bc_oos_method_title', ''),
        '#description' => t('Лучше оставить пустым или читай http://docs.pscb.ru/oos/paypage.html'),
    );

    $form['uc_oos_details'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment details'),
        '#default_value' => variable_get('uc_oos_details', ''),
        '#description' => t('Не обязательно. Описание заказа (платежа). При передаче его в различные платежные системы оно может быть сокращено; например для ЯД передаются первые 64 символа. Читай http://docs.pscb.ru/oos/paypage.html'),
    );

    $form['uc_oos_button_class'] = array(
        '#type' => 'textfield',
        '#title' => t('CSS class for button'),
        '#default_value' => variable_get('uc_oos_button_class', 'payonline'),
        '#description' => t('Этот клас будет у кнопки для оплаты онлайн'),
    );

    return system_settings_form($form);
}


function bc_ooc_check_order_status()
{
    $status = bc_ooc_merchant_api();
//    var_dump($status);

    if ($status['status'] === 'STATUS_SUCCESS') {

        $state = $status['payment']['state'];
        $amount = $status['payment']['amount'];

        if ($state == 'end') {
            $text = "Платёж найден. Платеж на сумму $amount руб. успешно проведен.";
            drupal_set_message($text, 'status');
        } else {
            $text = "Платеж на сумму $amount руб. не проведен и находится в состоянии $state.";
            drupal_set_message($text, 'warning');
        }
        return '';
    }

    if ($status['status'] === 'STATUS_FAILURE') {
        drupal_set_message('Заказ не оплачен', 'warning');
        return drupal_get_form('bc_oos_form');

    }

}

/**
 * Запрос к API Мерчанта.
 * @param $method string имя вызываемого метода API; например "checkPayment"
 * @param $params mixed словарь аргументов передаваемых в метод API
 * @return mixed ответ в виде объекта JSON
 * @throws Exception в случае сетевой ошибки
 */
function bc_ooc_merchant_api()
{
    $node = node_load(arg(1));

    $params = array(
        "marketPlace" => variable_get('bc_oos_market_id'),
        "orderId" => $node->nid,
    );

//    global $secret_merchant_key, $merchant_api_url_base;
    $url = variable_get('bc_oos_merchant_api_url_base') . "/checkPayment";
    $request_body = json_encode($params);
    $raw_signature = $request_body . variable_get('bc_oos_secret_key');
    $signature = hash('sha256', $raw_signature);

    $request_headers = array(
        "Signature: " . $signature,
        "Expect: ",
        "Content-Type: application/json",
        "Content-Length: " . strlen($request_body),
    );

    $curl = curl_init();
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; OOS API client; ' . php_uname('s') . '; PHP/' . phpversion() . ')');
    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $request_body);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $request_headers);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    // use it for debugging purposes
    // включить для отладки
    //curl_setopt($curl, CURLOPT_VERBOSE, 1);
    // use it if the following code fails with Exception "Could not get reply from OOS..."
    // попробуйте эти опции если не удается соединенится с сервером (Could not get reply from OOS)
//    curl_setopt($curl, CURLOPT_SSLVERSION, 3);
//    curl_setopt($curl, CURLOPT_SSL_CIPHER_LIST, 'SSLv3');

    $response_text = curl_exec($curl);
    if ($response_text === false) {
        throw new Exception('Could not get reply from OOS. Err No: ' . curl_errno($curl) . ', Description: ' . curl_error($curl));
    }

    $response_json = json_decode($response_text, true);
    if (!$response_json) {
        throw new Exception('Invalid data received, please make sure connection is working and requested API exists');
    }

    curl_close($curl);

    return $response_json;

}